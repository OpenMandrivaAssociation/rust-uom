From 4df979128cf88537b9be3d107887bee9e348213e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Robert-Andr=C3=A9=20Mauchin?= <zebob.m@gmail.com>
Date: Wed, 11 Dec 2019 20:36:14 +0100
Subject: [PATCH] Update to static_assertions to 1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Robert-Andr√© Mauchin <zebob.m@gmail.com>
---
 src/tests/asserts.rs | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/src/tests/asserts.rs b/src/tests/asserts.rs
index 3e218d7..3a0a9e8 100644
--- a/src/tests/asserts.rs
+++ b/src/tests/asserts.rs
@@ -3,11 +3,11 @@
 use lib::fmt::{Binary, Debug, Display, LowerExp, LowerHex, Octal, UpperExp, UpperHex};
 use tests::*;
 
-assert_impl_all!(arguments_impl; Arguments<Q<Z0, Z0, Z0>, meter>,
+assert_impl_all!(Arguments<Q<Z0, Z0, Z0>, meter>:
     Clone, Copy);
-assert_not_impl_any!(arguments_not_impl; Arguments<Q<Z0, Z0, Z0>, meter>,
+assert_not_impl_any!(Arguments<Q<Z0, Z0, Z0>, meter>:
     Binary, Debug, Display, LowerExp, LowerHex, Octal, UpperExp, UpperHex);
-assert_impl_all!(display_style; DisplayStyle,
+assert_impl_all!(DisplayStyle:
     Clone, Copy);
 
 storage_types! {
@@ -15,11 +15,11 @@ storage_types! {
 
     use super::*;
 
-    assert_impl_all!(q; Quantity<Q<Z0, Z0, Z0>, U<V>, V>,
+    assert_impl_all!(Quantity<Q<Z0, Z0, Z0>, U<V>, V>:
         Clone, Copy, PartialEq, PartialOrd, Send, Sync);
-    assert_impl_all!(qa_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_impl_all!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         Clone, Copy, Debug, Display, LowerExp, UpperExp);
-    assert_not_impl_any!(qa_not_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_not_impl_any!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         Binary, LowerHex, Octal, UpperHex);
 }
 
@@ -28,11 +28,11 @@ storage_types! {
 
     use super::*;
 
-    assert_impl_all!(q; Quantity<Q<Z0, Z0, Z0>, U<V>, V>,
+    assert_impl_all!(Quantity<Q<Z0, Z0, Z0>, U<V>, V>:
         Clone, Copy, Eq, Ord, PartialEq, PartialOrd, Send, Sync, ::lib::hash::Hash);
-    assert_impl_all!(qa_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_impl_all!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         Clone, Copy, Binary, Debug, Display, LowerHex, Octal, UpperHex);
-    assert_not_impl_any!(qa_not_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_not_impl_any!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         LowerExp, UpperExp);
 }
 
@@ -41,11 +41,11 @@ storage_types! {
 
     use super::*;
 
-    assert_impl_all!(q; Quantity<Q<Z0, Z0, Z0>, U<V>, V>,
+    assert_impl_all!(Quantity<Q<Z0, Z0, Z0>, U<V>, V>:
         Clone, Copy, Eq, Ord, PartialEq, PartialOrd, Send, Sync, ::lib::hash::Hash);
-    assert_impl_all!(qa_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_impl_all!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         Clone, Copy, Debug, Display);
-    assert_not_impl_any!(qa_not_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_not_impl_any!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         Binary, LowerExp, LowerHex, Octal, UpperExp, UpperHex);
 }
 
@@ -54,11 +54,11 @@ storage_types! {
 
     use super::*;
 
-    assert_impl_all!(q; Quantity<Q<Z0, Z0, Z0>, U<V>, V>,
+    assert_impl_all!(Quantity<Q<Z0, Z0, Z0>, U<V>, V>:
         Clone, Eq, Ord, PartialEq, PartialOrd, Send, Sync, ::lib::hash::Hash);
-    assert_impl_all!(qa_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_impl_all!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         Clone, Binary, Debug, Display, LowerHex, Octal, UpperHex);
-    assert_not_impl_any!(qa_not_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_not_impl_any!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         LowerExp, UpperExp);
 }
 
@@ -67,10 +67,10 @@ storage_types! {
 
     use super::*;
 
-    assert_impl_all!(q; Quantity<Q<Z0, Z0, Z0>, U<V>, V>,
+    assert_impl_all!(Quantity<Q<Z0, Z0, Z0>, U<V>, V>:
         Clone, Eq, Ord, PartialEq, PartialOrd, Send, Sync, ::lib::hash::Hash);
-    assert_impl_all!(qa_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_impl_all!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>:
         Clone, Debug, Display);
-    assert_not_impl_any!(qa_not_impl; QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>,
+    assert_not_impl_any!(QuantityArguments<Q<Z0, Z0, Z0>, U<V>, V, meter>: 
         Binary, LowerExp, LowerHex, Octal, UpperExp, UpperHex);
 }
-- 
2.24.1

